{
  "version": 3,
  "sources": ["../keystone.ts", "../models/users.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["\r\nimport { config } from '@keystone-6/core'\r\n\r\nimport { lists } from './schema'\r\n\r\n\r\nimport { withAuth, session } from './auth'\r\n\r\nexport default withAuth(\r\n  config({\r\n    db: {\r\n      provider: 'sqlite',\r\n      url: 'file:./keystone.db',\r\n    },\r\n    lists,\r\n    session,\r\n  })\r\n)\r\n", "import { list } from \"@keystone-6/core\";\r\nimport { allowAll } from \"@keystone-6/core/access\";\r\nimport { text, password, timestamp } from \"@keystone-6/core/fields\";\r\n\r\n\r\nexport const Users = list({\r\n    access: allowAll,\r\n    fields: {\r\n        fullName: text({ validation: { isRequired: true } }),\r\n        email: text({\r\n            validation: { isRequired: true },\r\n            isIndexed: 'unique',\r\n        }),\r\n        password: password({ validation: { isRequired: true } }),\r\n        phone: text({ validation: { isRequired: true } }),\r\n        address: text({ validation: { isRequired: true } }),\r\n        createdAt: timestamp({\r\n            defaultValue: { kind: 'now' },\r\n        }),\r\n        updatedAt: timestamp({\r\n            defaultValue: { kind: 'now' },\r\n        }),\r\n    },\r\n})", "import { list } from '@keystone-6/core'\r\nimport { allowAll } from '@keystone-6/core/access'\r\n\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n} from '@keystone-6/core/fields'\r\nimport { document } from '@keystone-6/fields-document'\r\nimport { type Lists } from '.keystone/types'\r\nimport { Users } from './models/users'\r\n\r\nexport const lists = {\r\n\r\n  User: Users,\r\n  UsersAgency:UsersAgency\r\n  \r\n  \r\n\r\n} satisfies Lists", "import { randomBytes } from 'node:crypto'\r\nimport { createAuth } from '@keystone-6/auth'\r\nimport { statelessSessions } from '@keystone-6/core/session'\r\n\r\nconst { withAuth } = createAuth({\r\n  listKey: 'User',\r\n  identityField: 'email',\r\n  sessionData: 'createdAt',\r\n  secretField: 'password',\r\n  initFirstItem: {\r\n    fields: ['fullName', 'email', 'password'],\r\n  },\r\n})\r\n\r\nconst sessionMaxAge = 60 * 60 * 24 * 30\r\n\r\nconst session = statelessSessions({\r\n  maxAge: sessionMaxAge,\r\n  secret: process.env.SESSION_SECRET,\r\n})\r\n\r\nexport { withAuth, session }\r\n// Cr\u00E9ation de l'authentification pour UsersAgency\r\nexport const { withAuthh} = createAuth({\r\n  listKey: 'UsersAgency', // Correction du nom pour correspondre au mod\u00E8le\r\n  identityField: 'email',\r\n  sessionData: 'createdAt',\r\n  secretField: 'password',\r\n  initFirstItem: {\r\n    fields: ['AgencyName', 'fullName', 'email', 'phone', 'password'], // Ajout des champs importants\r\n  },\r\n})\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,eAAuB;;;ACDvB,kBAAqB;AACrB,oBAAyB;AACzB,oBAA0C;AAGnC,IAAM,YAAQ,kBAAK;AAAA,EACtB,QAAQ;AAAA,EACR,QAAQ;AAAA,IACJ,cAAU,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACnD,WAAO,oBAAK;AAAA,MACR,YAAY,EAAE,YAAY,KAAK;AAAA,MAC/B,WAAW;AAAA,IACf,CAAC;AAAA,IACD,cAAU,wBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACvD,WAAO,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAChD,aAAS,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAClD,eAAW,yBAAU;AAAA,MACjB,cAAc,EAAE,MAAM,MAAM;AAAA,IAChC,CAAC;AAAA,IACD,eAAW,yBAAU;AAAA,MACjB,cAAc,EAAE,MAAM,MAAM;AAAA,IAChC,CAAC;AAAA,EACL;AACJ,CAAC;;;ACTM,IAAM,QAAQ;AAAA,EAEnB,MAAM;AAAA,EACN;AAIF;;;ACpBA,kBAA2B;AAC3B,qBAAkC;AAElC,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA,EACf,aAAa;AAAA,EACb,aAAa;AAAA,EACb,eAAe;AAAA,IACb,QAAQ,CAAC,YAAY,SAAS,UAAU;AAAA,EAC1C;AACF,CAAC;AAED,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAErC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ,QAAQ,IAAI;AACtB,CAAC;AAIM,IAAM,EAAE,UAAS,QAAI,wBAAW;AAAA,EACrC,SAAS;AAAA;AAAA,EACT,eAAe;AAAA,EACf,aAAa;AAAA,EACb,aAAa;AAAA,EACb,eAAe;AAAA,IACb,QAAQ,CAAC,cAAc,YAAY,SAAS,SAAS,UAAU;AAAA;AAAA,EACjE;AACF,CAAC;;;AHvBD,IAAO,mBAAQ;AAAA,MACb,qBAAO;AAAA,IACL,IAAI;AAAA,MACF,UAAU;AAAA,MACV,KAAK;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": ["import_core"]
}
